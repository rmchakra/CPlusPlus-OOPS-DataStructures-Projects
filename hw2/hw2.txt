Problem 1
(a)tracked and unmodified
(b)README.md = tracked, modified and unstaged
fun_problem.txt = untracked
(c)README.md = tracked and staged for commit
fun_problem.txt = tracked and staged for commit
(d)tracked but modified and not staged for commit for the latest versions of the files, however the previous versions without the additions "Markdown is too easy" for README and "So far, so good" forfun_problem.txt are commited and ready to be pushed onto github.
(e)README.md = tracked and staged for commit
fun_problem.txt = tracked and unmodified
 new changes discarded and previous version of file  fun_problem is loaded onto working directory
 So fun_problem.txt is empty as the changes are discarded
(f)README.md = exists in 2 states. The previous version is staged and ready for commit however the newly modified version which has been edited has not been staged.

Problem 3
(a) O(n)
since its big O, you assume worst case where every term of A is 0
j forms a series with the powers of 2 as it is multiplied by 2 at each iteration until j = i (by rounding off). now i = 2^(log i). Hence the inner loop will run logi times each time it is run.
Hence it will be a summation from o to logi where each term is 2^i. Thus using the formula for the geometric series, this is equal to (2^(log(i+1))-1)/(2-1) = 2^(logi) = i
The outer loop equation is sum from 0 to n the time required for the inner. Hence it runs n times. Hence the runtime for the whole equation would be n

(b)
outermost loop occurs logn times
middle occurs n-1 timmes
innermost occurs n-j times

(c)
(d)O(1)
capacity = n
The array resizes each time it goes over the size of the array
Mostly the array adds elements at constant time. 
However 1/size of the times it goes over the size of the array as the other times it simply inserts. In this case a reallocation occurs by performing a deep copy which would take linear time O(n)
Hence
O(n)/n = O(1)

Problem 4
1. Map - An int key for the zip codes should be mapped onto a struct with the voting statistics

A list wouldnt be appropriate as the order doesnt matter. 
A set wouldnt work as it only checks for the presence or absence and can not be used to enable qiock look up
Thus we need a data type that allows one to input a value (zip code) which is an int, and receive a result linked to it (the result being the voting statistics). Since there would be multiple voting statistics relateds to each zip code, a struct is required to store a unified collection of different forms of data. For example a float may be required to store decimal percentages of votes, a set of strings with major ethnic categories, etc.

2.set of strings with either the names of the students/usernames or set of ints with their ID numbers could be used.
We are only checking for the presence, or absense of a student in this collection or printing out the entire collection. Hence since the order is irrelevant (making a list dispensable) and theres no linking of an input giving a result (making a map overkill), the set is the most appropriate data type. Since names consist of letters, a string would be necessary.

3.List of structs
 Data relating to a pokemon such as its various statistics are required to be looked up deeming a struct necessary. A list is preferred as pokemon are ordered by their index.


4.Multimap.
First map has a string key (name of the movie) which points to a struct with data for movies with the same name. The second int key (for the year) points to a string set with the reviews relating to that movie
Since we need to give an input for each of these and look up a result relating to that input, a map is necessary.

Problem 5 
5, 4, 3, 2, 1 is the returned linked list
Initially funcA recurses through to the tail of the list.
funcB recurses to the end of the list passed as the second parameter which is the newly forming list. Initially this will just have the tail of the original list.
Once funcB recursively reaches the tail of the newly forming list, it appends the first parameter passed to it which would be the end of the original list. After an element is added to the second list, out, the element previous to it is made the new tail of the list by making it point to NULL.
This process ultimately reverses the entire list as it traces up the stack through the recursive function calls.